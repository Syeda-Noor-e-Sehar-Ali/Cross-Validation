from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
import numpy as np
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

iris = load_iris()

iris

X_train, X_test, y_train, y_test = train_test_split(iris.data,iris.target,test_size=0.3)

**Logistic Regression**

lr = LogisticRegression(solver='liblinear',multi_class='ovr')
lr.fit(X_train, y_train)
lr.score(X_test, y_test)

**SVM**

svm = SVC(gamma='auto')
svm.fit(X_train, y_train)
svm.score(X_test, y_test)

**Random Forest**

rf = RandomForestClassifier(n_estimators=40)
rf.fit(X_train, y_train)
rf.score(X_test, y_test)

**KFold cross validation Basic example**

from sklearn.model_selection import KFold
kf = KFold(n_splits=3)
kf

for train_index, test_index in kf.split([1,2,3,4,5,6,7,8,9]):
    print(train_index, test_index)

**Use KFold for our digits example**

def get_score(model, X_train, X_test, y_train, y_test):
    model.fit(X_train, y_train)
    return model.score(X_test, y_test)

get_score(SVC() ,X_train, X_test, y_train, y_test )

**cross_val_score function**

from sklearn.model_selection import cross_val_score

**Logistic regression model performance using cross_val_score**

cross_val_score(LogisticRegression(solver='liblinear',multi_class='ovr'), iris.data, iris.target,cv=3)

**svm model performance using cross_val_score**

cross_val_score(SVC(gamma='auto'), iris.data, iris.target,cv=3)

**random forest performance using cross_val_score**

cross_val_score(RandomForestClassifier(n_estimators=40),iris.data, iris.target,cv=3)

**Parameter tunning using k fold cross validation**

scores1 = cross_val_score(RandomForestClassifier(n_estimators=70),iris.data, iris.target, cv=10)
np.average(scores1)

scores2 = cross_val_score(RandomForestClassifier(n_estimators=20),iris.data, iris.target, cv=10)
np.average(scores2)

scores3 = cross_val_score(RandomForestClassifier(n_estimators=30),iris.data, iris.target, cv=10)
np.average(scores3)

scores4 = cross_val_score(RandomForestClassifier(n_estimators=40),iris.data, iris.target, cv=10)
np.average(scores4)
